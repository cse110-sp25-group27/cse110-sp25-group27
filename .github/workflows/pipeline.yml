name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  tests:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest
    outputs:
      docs-exists: ${{ steps.check-docs.outputs.docs-exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --max-warnings=0 --config eslint.config.js

      - name: Run unit tests with coverage
        run: npm run test -- --coverage

      - name: Debug coverage files location
        run: |
          echo "=== Checking coverage files after test run ==="
          ls -la docs/coverage_report/ 2>/dev/null || echo "No docs/coverage_report/ directory"
          if [ -f "docs/coverage_report/lcov.info" ]; then
            echo "✅ Found lcov.info in docs/coverage_report/"
            head -5 docs/coverage_report/lcov.info
          else
            echo "❌ lcov.info not found in expected location"
          fi

      - name: Generate Markdown documentation
        run: npm run generate-docs

      - name: Check docs folder structure
        id: check-docs
        run: |
          echo "=== Checking docs/ directory ==="
          ls -la docs/
          if [ -f "docs/index.html" ]; then
            echo "docs-exists=true" >> $GITHUB_OUTPUT
            echo "✅ docs/index.html found"
          else
            echo "docs-exists=false" >> $GITHUB_OUTPUT
            echo "❌ docs/index.html not found"
            exit 1
          fi
          
          echo "=== Checking for coverage files in docs ==="
          find docs/ -name "*.info" -o -name "lcov.info" -o -name "coverage-final.json" 2>/dev/null || echo "No coverage files in docs/"

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/
          retention-days: 1

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: docs/coverage_report/
          retention-days: 1

  deploy:
    name: Deploy docs to coverage-update branch
    runs-on: ubuntu-latest
    needs: tests
    # Run on pushes to any branch (for testing) or when merging to main
    if: github.event_name == 'push' && needs.tests.outputs.docs-exists == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: docs/

      - name: Setup Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare docs for deployment
        run: |
          touch docs/.nojekyll
          echo "Docs directory contents:"
          ls -la docs/

      - name: Switch to deployment branch
        run: |
          if git ls-remote --exit-code origin coverage-update; then
            echo "Branch exists, checking out..."
            git fetch origin coverage-update
            git checkout coverage-update
          else
            echo "Creating new orphan branch..."
            git checkout --orphan coverage-update
          fi

      - name: Clean branch and copy docs
        run: |
          # Remove all files except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          
          # Copy docs content to root
          cp -r docs/* .
          
          # Add all files
          git add .

      - name: Commit and push docs to coverage-update branch
        run: |
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # Use current branch name in commit message for debugging
            git commit -m "Deploy docs from GitHub Actions - Branch: ${{ github.ref_name }} - $(date)"
            git push origin coverage-update --force
            echo "✅ Successfully deployed to coverage-update branch from ${{ github.ref_name }}"
          fi

  codacy-coverage-reporter:
    name: Upload coverage report to Codacy
    runs-on: ubuntu-latest
    needs: tests
    # Run on pushes to any branch (for testing) or when merging to main
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage-files/

      - name: Debug coverage files after download
        run: |
          echo "=== Coverage files after artifact download ==="
          ls -la coverage-files/
          if [ -f "coverage-files/lcov.info" ]; then
            echo "✅ Found lcov.info"
          else
            echo "❌ lcov.info not found"
            find coverage-files/ -name "*.info" || echo "No .info files found"
          fi

      - name: Upload coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage-files/lcov.info