name: CI/CD Pipeline

on: [push]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  tests:
    name: 
    runs-on: ubuntu-latest
    outputs:
      docs-exists: ${{ steps.check-docs.outputs.docs-exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run unit tests with coverage (coverage added in config)
        run: npm test

      - name: Run ESLint
        run: npx eslint . --max-warnings=0 --config eslint.config.js

      - name: Generate Markdown documentation
        run: npm run generate-docs

      - name: Debug coverage files location
        run: |
          echo "=== Checking coverage files after test run ==="
          ls -la docs/coverage_report/ 2>/dev/null || echo "No docs/coverage_report/ directory"
          if [ -f "docs/coverage_report/lcov.info" ]; then
            echo "✅ Found lcov.info in docs/coverage_report/"
            head -5 docs/coverage_report/lcov.info
          else
            echo "❌ lcov.info not found in expected location"
          fi

      - name: Check docs folder structure
        id: check-docs
        run: |
          echo "=== Checking docs/ directory ==="
          ls -la docs/
          if [ -f "docs/index.html" ]; then
            echo "docs-exists=true" >> $GITHUB_OUTPUT
            echo "✅ docs/index.html found"
          else
            echo "docs-exists=false" >> $GITHUB_OUTPUT
            echo "❌ docs/index.html not found"
            exit 1
          fi
          
          echo "=== Checking for coverage files in docs ==="
          find docs/ -name "*.info" -o -name "lcov.info" -o -name "coverage-final.json" 2>/dev/null || echo "No coverage files in docs/"

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/
          retention-days: 1

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: docs/coverage_report/
          retention-days: 1

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci
        
      - name: Run E2E tests
        run: npm run test:e2e

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [tests, e2e-tests]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact (entire root)
        uses: actions/upload-pages-artifact@v3
        with:
          path: .   # deploy the whole repo root
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


  codacy-coverage-reporter:
    name: Upload coverage report to Codacy
    runs-on: ubuntu-latest
    needs: tests
    # Run on pushes to any branch (for testing) or when merging to main
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: docs/coverage_report/lcov.info

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage-files/

      - name: Upload coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage-files/lcov.info